//
// C++ Implementation: dodict
//
// Description: dodict is a little utility that should 
//		help begining a dict file
//
//
// Author: Pierre Marchand <pierremarc@oep-h.com>, (C) 2008
//
// Copyright: See COPYING file that comes with this distribution
//
//
#include <iostream>

#include <QCoreApplication>
#include <QString>
#include <QStringList>
#include <QTextStream>
#include <QFile>
// #include <QDebug>



int main(int argc, char *argv[] )
{
	QCoreApplication app( argc, argv );
	QStringList args(app.arguments());
	
	if(args.count() == 1 || args.at(1) == "-h" )
	{
		QString help("Here a usefull help message\n");
		std::cout << help.toStdString() ;
		return 1;
	}
	
	int begin(0);
	int end(0);
	QString lang;
// 	bool ok;
	// TODO fix the detection and interpretation of hex strings
	for(int i(1); i < args.count(); ++i)
	{
		if( args.at(i) == "-b" || args.at(i) == "--begin")
		{
			if(args.count() > i + 1)
			{
				QString barg(args.at(i+1));
				begin = barg.toInt();
			}
		}
		if( args.at(i) == "-e" || args.at(i) == "--end")
		{
			if(args.count() > i + 1)
			{
				QString earg(args.at(i+1));
				end = earg.toInt();
			}
		}
		if( args.at(i) == "-l" || args.at(i) == "--lang")
		{
			if(args.count() > i + 1)
			{
				lang = args.at(i+1);
			}
		}
	}
	
	if (lang.isEmpty() || begin == 0 || end == 0)
	{
		std::cerr << "\tGame Over!\n\tinsert a coin\n";
		return 1;
	}
	else
	{
		QString msgD("Begining of range is :\t" + QString::number(begin));
		QString msgE("End of range is :\t" + QString::number(end));
		QString msgL("Lang is :\t" + lang);
		std::cout << msgD.toStdString() << "\n" << msgE.toStdString() << "\n"<< msgL.toStdString() << "\n";
	}
	
	QFile file(lang + ".dict");
	if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
	{
		QString msg("Unable to ope "+ file.fileName());
		std::cout << msg.toStdString();
		return 1;
	}

	QTextStream out(&file);
	out << "% Dict file generated by dodict for \"" + lang + "\", please edit it.\n";
	out << "% Records are of the form : FFFF|prop1|prop2\n";
	out << "% Where FFFF is a raw hex value representing a code point in Unicode space\n";
	out << "% and \"props\" are arbitrary ascii strings.\n";
	out << "% Records begining by \"\%\" are comments.\n";
	for(int idx(begin); idx <= end; ++idx)
	{
		QString it("\% "+  QString(idx) +" \n%2\n");
		
		out << it.arg( idx, 4, 16, QChar('0') );
	}
	
	file.close();
	std::cout << "Successfully created "<< file.fileName().toStdString() << "\n"; 
	return 0;
}




















