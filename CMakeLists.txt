# Fontmatrix ./CMakeLists.txt v1

PROJECT(fontmatrix) # the name of your project
CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0)

SET (VERSION_MAJOR "0")
SET (VERSION_MINOR "5")
SET (VERSION_PATCH "0")
SET (VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
ADD_DEFINITIONS(-DFONTMATRIX_VERSION_MAJOR=${VERSION_MAJOR} -DFONTMATRIX_VERSION_MINOR=${VERSION_MINOR} -DFONTMATRIX_VERSION_PATCH=${VERSION_PATCH})
MESSAGE(STATUS "Building Fontmatrix ${VERSION}")

IF(UNIX AND NOT APPLE)
	SET (CMAKE_INSTALL_PREFIX /usr/local CACHE PATH "Installation path")
	SET (FONTMATRIX_BIN bin )
	SET (FONTMATRIX_QMDIR "share/fontmatrix/qm" )
ENDIF(UNIX AND NOT APPLE)

IF(APPLE)
# 	SET (CMAKE_INSTALL_PREFIX /Applications CACHE PATH "Installation path")
# 	SET (FONTMATRIX_BIN bin "")
ENDIF(APPLE)

IF(WIN32)
	SET (CMAKE_INSTALL_PREFIX c:/fontmatrix CACHE PATH "Installation path")
	SET (FONTMATRIX_BIN "")
	SET (FONTMATRIX_QMDIR "qm" )
ENDIF(WIN32)

ADD_DEFINITIONS(-DPREFIX="${CMAKE_INSTALL_PREFIX}")
MESSAGE(STATUS "Fontmatrix will be installed under ${CMAKE_INSTALL_PREFIX}")



SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules")

# Very generic definition, mainly to sort out bugs reported by mrdocs
IF(APPLE)
	ADD_DEFINITIONS( -DPLATFORM_APPLE )
ENDIF(APPLE)

#<< harfbuzz (shaper)
IF(WANT_HARFBUZZ)
# Since Harfbuzz source code is included into
# FM source tree, it’s just a matter of activation
# and « cohérence »
	ADD_DEFINITIONS( -DHAVE_HARFBUZZ )
	SET(HARFBUZZSHAPER 1)
	MESSAGE(STATUS "Build Harbuzz shaper support")
ENDIF(WANT_HARFBUZZ)
#>> harfbuzz (shaper)

#<< ICU
IF(WANT_ICU)
	SET(ICU_DIR ${CMAKE_MODULE_PATH})
	FIND_PACKAGE(ICU)
	if(ICU_FOUND)
		MESSAGE(STATUS "ICU Found OK")
		ADD_DEFINITIONS( -DHAVE_ICU )
		SET(ICUSHAPER 1)
		MESSAGE(STATUS "Build ICU shaper support")
	ELSE(ICU_FOUND)
		MESSAGE(FATAL_ERROR "ICU Not Found ARGH")
	ENDIF(ICU_FOUND)
ENDIF(WANT_ICU)

#>> ICU

#<< m17n
IF(WANT_M17N)
	SET(M17N_DIR ${CMAKE_MODULE_PATH})
	FIND_PACKAGE(M17N)
	if(M17N_FOUND)
		MESSAGE(STATUS "M17N Found OK")
		ADD_DEFINITIONS( -DHAVE_M17N )
		SET(M17NSHAPER 1)
		MESSAGE(STATUS "Build m17n shaper support")
	ELSE(M17N_FOUND)
		MESSAGE(FATAL_ERROR "M17N Not Found ARGH")
	ENDIF(M17N_FOUND)
ENDIF(WANT_M17N)
#>> m17n


SET(HARFBUZZ_DIR harfbuzz/src)
	ADD_SUBDIRECTORY(${HARFBUZZ_DIR})
	MESSAGE(STATUS "Adding "${CMAKE_SOURCE_DIR}/${HARFBUZZ_DIR})
SET(HARFBUZZ_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/${HARFBUZZ_DIR})


# I can’t remember what it does :|
ADD_DEFINITIONS( -DHIGH_PERF )


IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
	MESSAGE(STATUS "Debug build")
ELSE(CMAKE_BUILD_TYPE STREQUAL "Debug")
	ADD_DEFINITIONS(-DQT_NO_DEBUG_OUTPUT )
ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")

# A lot from Scribus
#<< Qt 
SET (QT_MIN_VERSION "4.4.0")
FIND_PACKAGE(Qt4 REQUIRED)
SET (QT_MT_REQUIRED TRUE)
SET (QT_USE_QTXML TRUE )
SET (QT_USE_QTSVG TRUE )
SET (QT_USE_QTNETWORK TRUE )
SET (QT_USE_QTWEBKIT TRUE )
SET (QT_USE_QTOPENGL TRUE )
INCLUDE( ${QT_USE_FILE} )

IF (QT_FOUND)
	IF(QT_QTWEBKIT_FOUND)
  		MESSAGE(STATUS "Qt4 Found OK")
		# Webkit needs it at least with OpenSuse package
  		INCLUDE_DIRECTORIES( QT_QT_INCLUDE_DIR )
	ELSE(QT_QTWEBKIT_FOUND)
		MESSAGE(FATAL_ERROR "QtWebKit not found")
  	ENDIF(QT_QTWEBKIT_FOUND)
ELSE(QT_FOUND)
	MESSAGE(FATAL_ERROR "No Qt4 found")
ENDIF(QT_FOUND)
#>> Qt

IF(QT_QTOPENGL_FOUND)
	ADD_DEFINITIONS(-DHAVE_QTOPENGL )
ENDIF(QT_QTOPENGL_FOUND)

#<< FreeType2
# We give a try to the built-in cmake Freetype.cmake
FIND_PACKAGE(Freetype REQUIRED)
IF (FREETYPE_FOUND)
  MESSAGE(STATUS "FreeType2 Library Found OK")
ELSE (FREETYPE_FOUND)
  MESSAGE(FATAL_ERROR "No Freetype found")  
ENDIF(FREETYPE_FOUND)
#>> FreeType2

SET(FONTCONFIG_DIR ${CMAKE_MODULE_PATH})
  FIND_PACKAGE(FONTCONFIG)
IF(FONTCONFIG_FOUND)
        MESSAGE(STATUS "FontConfig Found OK")
        ADD_DEFINITIONS( -DHAVE_FONTCONFIG )
ENDIF(FONTCONFIG_FOUND)


# tell cmake to process CMakeLists.txt in that subdirectory
SET(HYPHENATE_DIR src/hyphenate)
ADD_SUBDIRECTORY(${HYPHENATE_DIR})
SET(HYPHENATE_INCLUDE_DIR ${CMAKE_SOURCE_DIR}${HYPHENATE_DIR})


ADD_SUBDIRECTORY(src)

# dodict
# ADD_SUBDIRECTORY(src/langs)


######## Installation ##################

IF(UNIX AND NOT APPLE)
	SET(DESKTOPDIR "share/applications/")
	SET(MANDIR "share/man/")
	SET(ICONDIR "share/icons/hicolor/48x48/apps/")
	
	INSTALL(FILES
	fontmatrix.desktop
	DESTINATION ${DESKTOPDIR}
	)
	
	INSTALL(FILES
	fontmatrix.png
	DESTINATION ${ICONDIR}
	)
	
	INSTALL(FILES
	fontmatrix.1
	DESTINATION "${MANDIR}man1"
	)
ENDIF(UNIX AND NOT APPLE)

IF(APPLE)
	SET(MACOSX_BUNDLE_ICON_FILE "${CMAKE_SOURCE_DIR}/src/icons/application-fontmatrix_128.png")
	SET(MACOSX_BUNDLE_GUI_IDENTIFIER "org.undertype.fontmatrix")
	SET(MACOSX_BUNDLE_NAME "fontmatrix")
ENDIF(APPLE)

IF(WIN32)
# nothing for atm
ENDIF(WIN32)

SET(CPACK_PACKAGE_VERSION_MAJOR ${VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${VERSION_PATCH})

INCLUDE(CPack)
