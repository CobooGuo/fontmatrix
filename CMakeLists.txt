# Fontmatrix ./CMakeLists.txt v1

PROJECT(fontmatrix) # the name of your project
CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0)

SET (VERSION_MAJOR "0")
SET (VERSION_MINOR "5")
SET (VERSION_PATCH "0")
SET (VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
ADD_DEFINITIONS(-DFONTMATRIX_VERSION_MAJOR=${VERSION_MAJOR} -DFONTMATRIX_VERSION_MINOR=${VERSION_MINOR} -DFONTMATRIX_VERSION_PATCH=${VERSION_PATCH})
MESSAGE(STATUS "Building Fontmatrix ${VERSION}")
SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules")

# Very generic definition, mainly to sort out bugs reported by mrdocs
IF(APPLE)
	ADD_DEFINITIONS( -DPLATFORM_APPLE )
ENDIF(APPLE)

#<< harfbuzz (shaper)
IF(WANT_HARFBUZZ)
# Since Harfbuzz source code is included into
# FM source tree, it’s just a matter of activation
# and « cohérence »
	ADD_DEFINITIONS( -DHAVE_HARFBUZZ )
	SET(HARFBUZZSHAPER 1)
	MESSAGE(STATUS "Build Harbuzz shaper support")
ENDIF(WANT_HARFBUZZ)
#>> harfbuzz (shaper)

#<< ICU
IF(WANT_ICU)
	SET(ICU_DIR ${CMAKE_MODULE_PATH})
	FIND_PACKAGE(ICU)
	if(ICU_FOUND)
		MESSAGE(STATUS "ICU Found OK")
		ADD_DEFINITIONS( -DHAVE_ICU )
		SET(ICUSHAPER 1)
		MESSAGE(STATUS "Build ICU shaper support")
	ELSE(ICU_FOUND)
		MESSAGE(FATAL_ERROR "ICU Not Found ARGH")
	ENDIF(ICU_FOUND)
ENDIF(WANT_ICU)

#>> ICU

#<< m17n
IF(WANT_M17N)
	SET(M17N_DIR ${CMAKE_MODULE_PATH})
	FIND_PACKAGE(M17N)
	if(M17N_FOUND)
		MESSAGE(STATUS "M17N Found OK")
		ADD_DEFINITIONS( -DHAVE_M17N )
		SET(M17NSHAPER 1)
		MESSAGE(STATUS "Build m17n shaper support")
	ELSE(M17N_FOUND)
		MESSAGE(FATAL_ERROR "M17N Not Found ARGH")
	ENDIF(M17N_FOUND)
ENDIF(WANT_M17N)
#>> m17n


SET(HARFBUZZ_DIR harfbuzz/src)
ADD_SUBDIRECTORY(${HARFBUZZ_DIR})
SET(HARFBUZZ_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/harfbuzz/src)

# I can’t remember what it does :|
ADD_DEFINITIONS( -DHIGH_PERF )


IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
	MESSAGE(STATUS "Debug build")
ELSE(CMAKE_BUILD_TYPE STREQUAL "Debug")
	ADD_DEFINITIONS(-DQT_NO_DEBUG_OUTPUT )
ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")

# A lot from Scribus
#<< Qt 
SET (QT_MT_REQUIRED TRUE)
SET (QT_MIN_VERSION "4.4.0")
SET (QT_USE_QTXML TRUE )
SET (QT_USE_QTSVG TRUE )
SET (QT_USE_QTNETWORK TRUE )
SET (QT_USE_QTWEBKIT TRUE )
FIND_PACKAGE(Qt4 REQUIRED)
INCLUDE( ${QT_USE_FILE} )
IF (QT_FOUND)
  MESSAGE(STATUS "Qt4 Found OK")
# Webkit needs it at least with OpenSuse package
  INCLUDE_DIRECTORIES( QT_QT_INCLUDE_DIR )
ELSE(QT_FOUND)
  MESSAGE(FATAL_ERROR "No Qt4 found")
ENDIF(QT_FOUND)
#>> Qt

#<< FreeType2
# We give a try to the built-in cmake Freetype.cmake
FIND_PACKAGE(Freetype REQUIRED)
IF (FREETYPE_FOUND)
  MESSAGE(STATUS "FreeType2 Library Found OK")
ELSE (FREETYPE_FOUND)
  MESSAGE(FATAL_ERROR "No Freetype found")  
ENDIF(FREETYPE_FOUND)
#>> FreeType2

SET(FONTCONFIG_DIR ${CMAKE_MODULE_PATH})
  FIND_PACKAGE(FONTCONFIG)
IF(FONTCONFIG_FOUND)
        MESSAGE(STATUS "FontConfig Found OK")
        ADD_DEFINITIONS( -DHAVE_FONTCONFIG )
ENDIF(FONTCONFIG_FOUND)


# tell cmake to process CMakeLists.txt in that subdirectory


ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(src/langs)

######## Installation ##################

IF (CMAKE_INSTALL_PREFIX) 
	SET (INSTALLDIR ${CMAKE_INSTALL_PREFIX})
ELSE (CMAKE_INSTALL_PREFIX)
	SET (INSTALLDIR "/usr/local")
ENDIF (CMAKE_INSTALL_PREFIX) 

MESSAGE(STATUS "")
MESSAGE(STATUS "Fontmatrix will be installed under ${CMAKE_INSTALL_PREFIX}")
MESSAGE(STATUS "")

SET(DESKTOPDIR "share/applications/")
# ADD_DEFINITIONS("-DDESKTOPDIR=\\\"${CMAKE_INSTALL_PREFIX}/${DESKTOPDIR}\\\"")
INSTALL(FILES
  fontmatrix.desktop
  DESTINATION ${DESKTOPDIR}
)

SET(ICONDIR "share/icons/hicolor/48x48/apps/")
# ADD_DEFINITIONS("-DICONDIR=\\\"${CMAKE_INSTALL_PREFIX}/${ICONDIR}\\\"")
INSTALL(FILES
  fontmatrix.png
  DESTINATION ${ICONDIR}
)

SET(CPACK_PACKAGE_VERSION_MAJOR ${VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${VERSION_PATCH})

INCLUDE(CPack)
